MODULE UsbBDIDll ["BDI.dll"];
	IMPORT SYSTEM;

	CONST 
		MAX_NOF_LONGS_FILL* = 84;
		MAX_UART_DATA_LENGTH* = 128; 

	TYPE 
		PtrSTR* = POINTER TO ARRAY [untagged] OF SHORTCHAR;
		BOOL* = INTEGER; 

(* -------JVM--------- *)

	PROCEDURE getErrPipeHandle* (): INTEGER; 
	(*END getErrPipeHandle;  *)

	PROCEDURE getOutPipeHandle* (): INTEGER; 
	(*END getOutPipeHandle;  *)

	PROCEDURE createJVM* (classpath: PtrSTR): BOOL; 
	(*END createJVM;  *)

	PROCEDURE destroyJVM* (): INTEGER; 
	(*END destroyJVM;  *)

	PROCEDURE checkForExceptions* (): BOOL; 
	(*END checkForExceptions;  *)

(* -------USB--------- *)

	PROCEDURE USB_Device_open*; 
	(*END USB_Device_open;  *)

	PROCEDURE USB_Device_close*; 
	(*END USB_Device_close;  *)

	PROCEDURE USB_Device_reset*; 
	(*END USB_Device_reset;  *)

(* -------555--------- *)

	PROCEDURE BDI555_go*; 
	(*END BDI555_go;  *)

	PROCEDURE BDI555_break_*; 
	(*END BDI555_break_;  *)

	PROCEDURE BDI555_reset_target*; 
	(*END BDI555_reset_target;  *)

	PROCEDURE BDI555_isFreezeAsserted* (): BOOL; 
	(*END BDI555_isFreezeAsserted;  *)

	PROCEDURE BDI555_startFastDownload* (adr: INTEGER); 
	(*END BDI555_startFastDownload;  *)

	PROCEDURE BDI555_fastDownload* (downloadData: (* ARRAY OF *) INTEGER;  dataLength: INTEGER);
	(*END BDI555_fastDownload;  *)

	PROCEDURE BDI555_stopFastDownload*; 
	(*END BDI555_stopFastDownload;  *)

	PROCEDURE BDI555_writeMem* (addr, value, size: INTEGER); 
	(*END BDI555_writeMem;  *)

	PROCEDURE BDI555_readMem* (addr, size: INTEGER): INTEGER; 
	(*END BDI555_readMem;  *)

	PROCEDURE BDI555_writeMemSeq* (value, size: INTEGER); 
	(*END BDI555_writeMemSeq;  *)

	PROCEDURE BDI555_readMemSeq* (size: INTEGER): INTEGER; 
	(*END BDI555_readMemSeq;  *)

	PROCEDURE BDI555_readGPR* (gpr: INTEGER): INTEGER; 
	(*END BDI555_readGPR;  *)

	PROCEDURE BDI555_writeGPR* (gpr, value: INTEGER); 
	(*END BDI555_writeGPR;  *)

	PROCEDURE BDI555_readSPR* (spr: INTEGER): INTEGER; 
	(*END BDI555_readSPR;  *)

	PROCEDURE BDI555_writeSPR* (spr, value: INTEGER); 
	(*END BDI555_writeSPR;  *)

	PROCEDURE BDI555_readMSR* (): INTEGER; 
	(*END BDI555_readMSR;  *)

	PROCEDURE BDI555_writeMSR* (value: INTEGER); 
	(*END BDI555_writeMSR;  *)

	PROCEDURE BDI555_readFPR* (fpr, tmpMemAddr: INTEGER): LONGINT; 
	(*END BDI555_readFPR;  *)

	PROCEDURE BDI555_writeFPR* (fpr, tmpMemAddr: INTEGER; value: LONGINT); 
	(*END BDI555_writeFPR;  *)

	PROCEDURE BDI555_readCR* (): INTEGER; 
	(*END BDI555_readCR;  *)

	PROCEDURE BDI555_writeCR* (value: INTEGER); 
	(*END BDI555_writeCR;  *)

	PROCEDURE BDI555_readFPSCR* (): INTEGER; 
	(*END BDI555_readFPSCR;  *)

	PROCEDURE BDI555_writeFPSCR* (value: INTEGER); 
	(*END BDI555_writeFPSCR;  *)

	PROCEDURE BDI555_isTargetInDebugMode* (): BOOL; 
	(*END BDI555_isTargetInDebugMode;  *)

	PROCEDURE BDI555_setGpr31* (gpr31: INTEGER); 
	(*END BDI555_setGpr31;  *)

(* -------332--------- *)

	PROCEDURE BDI332_nopsToLegalCmd*; 
	(*END BDI332_nopsToLegalCmd;  *)

	PROCEDURE BDI332_go*; 
	(*END BDI332_go;  *)

	PROCEDURE BDI332_break_*; 
	(*END BDI332_break_;  *)

	PROCEDURE BDI332_reset_target*; 
	(*END BDI332_reset_target;  *)

	PROCEDURE BDI332_reset_peripherals*; 
	(*END BDI332_reset_peripherals;  *)

	PROCEDURE BDI332_isFreezeAsserted* (): BOOL; 
	(*END BDI332_isFreezeAsserted;  *)

	PROCEDURE BDI332_fillMem* (downloadData: (* ARRAY OF *) INTEGER;  dataLength: INTEGER);
	(*END BDI332_fillMem;  *)

	PROCEDURE BDI332_dumpMem* (nofData: INTEGER; VAR result: ARRAY OF INTEGER): INTEGER; 
(*
	PROCEDURE BDI332_dumpMem* (nofData: INTEGER; VAR result: ARRAY [untagged] MAX_NOF_LONGS_FILL OF INTEGER): INTEGER;
*)
	(*END BDI332_dumpMem;  *)

	PROCEDURE BDI332_writeMem* (addr, value, size: INTEGER); 
	(*END BDI332_writeMem;  *)

	PROCEDURE BDI332_readMem* (addr, size: INTEGER): INTEGER; 
	(*END BDI332_readMem;  *)

	PROCEDURE BDI332_readUserReg* (reg: INTEGER): INTEGER; 
	(*END BDI332_readUserReg;  *)

	PROCEDURE BDI332_writeUserReg* (reg, value: INTEGER); 
	(*END BDI332_writeUserReg;  *)

	PROCEDURE BDI332_readSysReg* (reg: INTEGER): INTEGER; 
	(*END BDI332_readSysReg;  *)

	PROCEDURE BDI332_writeSysReg* (reg, value: INTEGER); 
	(*END BDI332_writeSysReg;  *)

	PROCEDURE BDI332_isTargetInDebugMode* (): BOOL; 
	(*END BDI332_isTargetInDebugMode;  *)

(* ------ UART0 ------ *)

	PROCEDURE UART0_read* (VAR data: ARRAY [untagged] OF SHORTCHAR): INTEGER; 
	(*END UART0_read;  *)

	PROCEDURE UART0_write* (data: (* ARRAY OF SHORTCHAR *) INTEGER;  length: INTEGER): BOOL;
	(*END UART0_write;  *)

END UsbBDIDll.