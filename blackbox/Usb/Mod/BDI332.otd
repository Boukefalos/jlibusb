MODULE UsbBDI332;
	IMPORT SYS := SYSTEM, BDI := UsbBDIDll, BDIMain := UsbBDI, WinApi;

	CONST 
		FALSE_ = 0; 

	VAR 
		Done-: BOOLEAN; 

	(* --------- 332 ----------------- *)

	PROCEDURE nopsToLegalCmd * ; 
	BEGIN
		BDI.BDI332_nopsToLegalCmd;
		Done := ~BDIMain.CheckForExceptions()
	END nopsToLegalCmd; 

	PROCEDURE go * ; 
	BEGIN
		BDI.BDI332_go;
		Done := ~BDIMain.CheckForExceptions()
	END go; 

	PROCEDURE break_ * ; 
	BEGIN
		BDI.BDI332_break_;
		Done := ~BDIMain.CheckForExceptions()
	END break_; 

	PROCEDURE reset_target * ; 
	BEGIN
		BDI.BDI332_reset_target;
		Done := ~BDIMain.CheckForExceptions()
	END reset_target; 

	PROCEDURE reset_peripherals * ; 
	BEGIN
		BDI.BDI332_reset_peripherals;
		Done := ~BDIMain.CheckForExceptions()
	END reset_peripherals; 

	PROCEDURE isFreezeAsserted * (): BOOLEAN; 
		VAR result: WinApi.BOOL;
	BEGIN
		result := BDI.BDI332_isFreezeAsserted();
		Done := ~BDIMain.CheckForExceptions();
		RETURN result # FALSE_
	END isFreezeAsserted; 

	PROCEDURE fillMem * (downloadData: ARRAY OF INTEGER; dataLength: INTEGER); 
	BEGIN
		BDI.BDI332_fillMem(SYS.ADR(downloadData[0]), dataLength);
		Done := ~BDIMain.CheckForExceptions()
	END fillMem; 

	PROCEDURE dumpMem * (nofData: INTEGER; VAR result: ARRAY OF INTEGER; VAR length: INTEGER); 
	BEGIN
		length := BDI.BDI332_dumpMem(nofData, result);
		Done := ~BDIMain.CheckForExceptions()
	END dumpMem; 

	PROCEDURE writeMem * (addr, value, size: INTEGER); 
	BEGIN
		BDI.BDI332_writeMem(addr, value, size);
		Done := ~BDIMain.CheckForExceptions()
	END writeMem; 

	PROCEDURE readMem * (addr, size: INTEGER): INTEGER; 
		VAR result: INTEGER;
	BEGIN
		result := BDI.BDI332_readMem(addr, size);
		Done := ~BDIMain.CheckForExceptions();
		RETURN result
	END readMem; 

	PROCEDURE readUserReg * (reg: INTEGER): INTEGER; 
		VAR result: INTEGER;
	BEGIN
		result := BDI.BDI332_readUserReg(reg);
		Done := ~BDIMain.CheckForExceptions();
		RETURN result
	END readUserReg; 

	PROCEDURE writeUserReg * (reg, value: INTEGER); 
	BEGIN
		BDI.BDI332_writeUserReg(reg, value);
		Done := ~BDIMain.CheckForExceptions()
	END writeUserReg; 

	PROCEDURE readSysReg * (reg: INTEGER): INTEGER; 
		VAR result: INTEGER;
	BEGIN
		result := BDI.BDI332_readSysReg(reg);
		Done := ~BDIMain.CheckForExceptions();
		RETURN result
	END readSysReg; 

	PROCEDURE writeSysReg * (reg, value: INTEGER); 
	BEGIN
		BDI.BDI332_writeSysReg(reg, value);
		Done := ~BDIMain.CheckForExceptions()
	END writeSysReg; 

	PROCEDURE isTargetInDebugMode * (): BOOLEAN; 
	BEGIN
		RETURN BDI.BDI332_isTargetInDebugMode() # FALSE_;
	END isTargetInDebugMode; 

END UsbBDI332.